WARNING_AND_FILE_DESCRIPTION = "\
 # --------------------\n\
 #    !!!WARNING!!!\n\
 # --------------------\n\
 # This file is autogenerated, any changes will not be retained after next\n\
 # generation.\n\
 #\n\
 # @brief In this file are Source, Param, Group dictionaries.\n\
 #/"
sourceToString = "sourceIDtoName"
stringToSource = "nameToSourceID"
paramToString = "paramIDtoName"
stringToParam = "nameToParamID"
groupToString = "groupIDtoName"
stringToGroup = "nameToGroupID"

class python_gen:

    def __init__(self, name):
        self.name = name
    
    @staticmethod
    def explode_SourceGroup_IDs(all_ids):
        exploded = []
        exploded.append( (0, "DEFAULT")  )
         
        for single_id in all_ids:
            if "ID" not in single_id:
                max_id = int(single_id['MaxID'], 16)
                curr_id = int(single_id['MinID'], 16)
                
                adressesRange = []
                while max_id >= curr_id:
                    adressesRange.append(curr_id)
                    curr_id = curr_id + 1
                x = 0
                for j in range(len(adressesRange)):
                    x += 1
                    exploded.append( (adressesRange[j], single_id["Name"].replace("<x>", str(x)))  )
                
            else:
                exploded.append( (int(single_id["ID"], 16), single_id["Name"]) )
              
        exploded.sort()
            
        return exploded
    
                
    @staticmethod
    def explode_Param_IDs(all_ids):
        exploded = []
        exploded.append( (0, "DEFAULT", 0, "DEFAULT")  )
        
        for single_id in all_ids:
            if "ID" not in single_id:
                max_id = int(single_id['MaxID'], 16)
                curr_id = int(single_id['MinID'], 16)
                
                adressesRange = []
                while max_id >= curr_id:
                    adressesRange.append(curr_id)
                    curr_id = curr_id + 1
                x = 0
                for j in range(len(adressesRange)):
                    x += 1
                    exploded.append( (adressesRange[j], single_id["Name"].replace("<x>", str(x)), single_id["Priority"], single_id["Group"])  )
                
            else:
                exploded.append( (int(single_id["ID"], 16), single_id["Name"], single_id["Priority"], single_id["Group"]) )
              
        exploded.sort()
            
        return exploded
            
            
    def write(self, file, text, newLinesQuantity):
        file.write(text)
        file.write("\n" * newLinesQuantity)

    def write_to_file(self, json_object):
        with open(self.name, "w") as file:
            self.write(file, WARNING_AND_FILE_DESCRIPTION, 2)
                   
            explodedSourceIDs = self.explode_SourceGroup_IDs(json_object["SourceIDs"])
            explodedParamIDs = self.explode_Param_IDs(json_object["ParamIDs"])
            explodedGroupIDs = self.explode_SourceGroup_IDs(json_object["GroupIDs"])
            explodedGroupIDsDict = dict()
            for groupID in explodedGroupIDs:
                explodedGroupIDsDict[groupID[1]] = groupID[0]
            
            
            # Source ID
            self.write(file, "{} = dict()".format(sourceToString), 1)
            for ID in explodedSourceIDs:
                self.write(file, "{}[{}] = \"{}\"".format(sourceToString, ID[0], ID[1]), 1)
            self.write(file, "", 2)
            
            self.write(file, "{} = dict()".format(stringToSource), 1)
            for ID in explodedSourceIDs:
                self.write(file, "{}[\"{}\"] = {}".format(stringToSource, ID[1], ID[0]), 1)
            self.write(file, "", 2)
            
            # Param ID
            self.write(file, "{} = dict()".format(paramToString), 1)
            for ID in explodedParamIDs:
                self.write(file, "{}[{}] = \"{}\"".format(paramToString, ID[0], ID[1]), 1)
            self.write(file, "", 2)
            
            self.write(file, "{} = dict()".format(stringToParam), 1)
            for ID in explodedParamIDs:
                self.write(file, "{}[\"{}\"] = {{'GroupID': {}, 'ParamID': {}, 'Priority': {}}}".format(stringToParam, ID[1], explodedGroupIDsDict[ID[3]], ID[0], ID[2]), 1)
            self.write(file, "", 2)
            
            # Group ID
            self.write(file, "{} = dict()".format(groupToString), 1)
            for ID in explodedGroupIDs:
                self.write(file, "{}[{}] = \"{}\"".format(groupToString, ID[0], ID[1]), 1)
            self.write(file, "", 2)
            
            self.write(file, "{} = dict()".format(stringToGroup), 1)
            for ID in explodedGroupIDs:
                self.write(file, "{}[\"{}\"] = {}".format(stringToGroup, ID[1], ID[0]), 1)
            self.write(file, "", 2)
