IF_N_DEF_STRING = "#ifndef F1XX_PROJECT_TEMPLATE_LIB_SBT_SDK_F1XX_SBT_SDK_SYSTEM_{}_H"
DEFINE_STRING = "#define F1XX_PROJECT_TEMPLATE_LIB_SBT_SDK_F1XX_SBT_SDK_SYSTEM_{}_H"
INCLUDE_STRING_LIB = "#include <cstdint>"
WARNING_AND_FILE_DESCRIPTION = "/**\
 * !!!WARNING!!!\n\
 * This file is autogenerated, any changes will not be retained after next\n\
 * generation.\n\
 *\n\
 * @brief In this file are Source, Param, Group, Message ID definitions.\n\
 */"
NAMESPACE_BEGIN_STRING = "namespace SBT::System::Comm::CAN_ID {"
NAMESPACE_END_STRING = "} // namespace SBT::System::Comm::CAN_ID"

ENUM_CLASS_CAN_BOARD_ID_BEGIN = "enum class Source : uint8_t {\n\
\tDEFAULT = 0x00,"
ENUM_CLASS_CAN_BOARD_ID_END = "} // enum Source"

ENUM_CLASS_CAN_PARAMETERS_ID_BEGIN = "enum class Param : uint16_t {\n\
\tDEFAULT = 0x00,"
ENUM_CLASS_CAN_PARAMETERS_ID_END = "} // enum Param"


class HGenerate:

    def __init__(self, name):
        self.name = name

    @staticmethod
    def id_range_loop(json_object, i, rng):
        max_id = int(json_object[rng][i]['MaxID'], 16)
        curr_id = int(json_object[rng][i]['MinID'], 16)
        adresses = []
        while max_id >= curr_id:
            adresses.append(hex(curr_id))
            curr_id = curr_id + 1
        x = 0
        dict_address = []
        for j in range(len(adresses)):
            x += 1
            help_str = "{} = {}".format(x, "0x{0:0{1}X}".format(int(adresses[j], 16), 2))
            dict_address.append(json_object[rng][i]["Name"].replace("<x>", help_str))
        return dict_address

    def write(self, file, text, newLinesQuantity):
        file.write(text)
        file.write("\n" * newLinesQuantity)

    def write_to_file(self, json_object):
        with open(self.name, "w") as file:
            self.write(file, IF_N_DEF_STRING.format(self.name[0:self.name.index('.')]), 1)
            self.write(file, DEFINE_STRING.format(self.name[0:self.name.index('.')]), 2)
            self.write(file, INCLUDE_STRING_LIB, 2)
            self.write(file, WARNING_AND_FILE_DESCRIPTION, 2)
            self.write(file, NAMESPACE_BEGIN_STRING, 2)
            
            self.write(file, ENUM_CLASS_CAN_BOARD_ID_BEGIN, 1)
            # for loop
            size = len(json_object["SourceIDs"])
            for i in range(len(json_object["SourceIDs"])):
                if 'ID' not in json_object['SourceIDs'][i]:
                    generator = self.id_range_loop(json_object, i, "SourceIDs")
                    gener_size = len(generator)

                    for j in range(len(generator)):
                        if j == gener_size-1 and i == size-1:
                            self.write(file, "\t{}".format(generator[j]), 1)
                        else:
                            self.write(file, "\t{},".format(generator[j]), 1)
                else:
                    self.write(file, "\t{} = {}".format(json_object['SourceIDs'][i]["Name"], 
                                                      json_object["SourceIDs"][i]['ID']), 0)
                    if i != size-1:
                        self.write(file, ",", 1)
                    else:
                        self.write(file, "", 0)
                        
            self.write(file, ENUM_CLASS_CAN_BOARD_ID_END, 2)
    
            
            # file.write(ENUM_CLASS_CAN_PARAMETERS_ID_BEGIN)
            # size = len(json_object["Parameters"])
            # for i in range(len(json_object["Parameters"])):
            #     if 'ID' not in json_object['Parameters'][i]:
            #         generator = self.id_range_loop(
            #             json_object, i, "Parameters")
            #         gener_size = len(generator)
            #         for j in generator:
            #             if j == gener_size-1 and i == size-1:
            #                 file.write(j + "\n  ")
            #             else:
            #                 file.write(j + ",\n  ")
            #     else:
            #         file.write(json_object['Parameters'][i]["Name"] + " = ")
            #         file.write(json_object["Parameters"][i]['ID'])
            #         if i != size-1:
            #             file.write(",\n  ")
            #         else:
            #             file.write("\n  ")
            # file.write(ENUM_CLASS_CAN_PARAMETERS_ID_END)
            
            self.write(file, NAMESPACE_END_STRING, 0)
